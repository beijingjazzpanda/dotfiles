" vimrc for gvim

" ============== 基本配置 ===============

set nocompatible

language zh_HK.utf8
set langmenu=en

set statusline=%f
set statusline+=%h
set statusline+=%m
set statusline+=%r
set statusline+=\ [%{&ff}]
set statusline+=\ %{exists('g:loaded_fugitive')?FugitiveStatusline():''}
set statusline+=\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})
set statusline+=%=
set statusline+=%l,%c%V
set statusline+=\ %P

set showmatch

set laststatus=2

set novb

set showmode
set showcmd       

set clipboard=unnamed

set wildmenu
set wildmode=list:longest,full

set grepprg=grep\ -n

set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
map <silent> <F2> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
        \set guioptions-=r <bar>
        \set guioptions-=L <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=r <Bar>
        \set guioptions+=L <Bar>
    \endif<CR>

set number
set relativenumber

set hlsearch

set guifont=OPPOSans-FiraCode\ 混合体:h11
set guifontwide=OPPOSans-FiraCode\ 混合体:h12

set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab autoindent breakindent

set wrap
augroup withoutwrap
    autocmd!
    autocmd FileType qf,fugitiveblame setlocal nowrap
augroup END

set ruler

set ignorecase
set smartcase

set noautoread

set display=lastline

set renderoptions=type:directx,renmode:5,taamode:1

set nofoldenable
set foldmethod=syntax

set formatoptions+=r

set splitbelow splitright

set incsearch

set signcolumn=yes

set colorcolumn=80

filetype plugin indent on

set backspace=indent,eol,start

set noea

set wildignore+=*/.git/**,*/.svn/**,*/.settings/**,*/.metadata/**,*/node_modules/**,*/build/**,*/target/**

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

colorscheme delek

set guicursor=a:blinkon0

hi Pmenu guibg=#e8f4f8
hi CocMenuSel guibg=LightYellow
hi CocErrorFloat guifg=DarkRed
hi CocWarningFloat guifg=DarkMagenta
hi CocInfoFloat guifg=DarkYellow

au BufRead,BufNewFile *.liquid setfiletype html
au BufRead,BufNewFile *.njk setfiletype html

set columns=120

set path+=**

exe "set shell=".$HOME.'\root\software\Git\bin\bash.exe\ --login\ -i'


" ============== 插件配置 ===============

call plug#begin('~/vimfiles/plugged')

Plug 'preservim/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'mbbill/fencview'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()


let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
    \ 'dir':'\.git$\|\.svn$\|\.settings$\|\.metadata$\|node_modules\|build\|dist\|out\|target\|env\|dist\|build\|__pycache__$',
    \ 'file': '\.classpath$\|\.project$'
    \ }

let g:coc_node_path = 'D://kaku//software//node//node-v18.13.0-win-x64//node.exe'
let g:coc_global_extensions = [
    \ 'coc-tsserver',
    \ 'coc-json',
    \ 'coc-xml',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-pyright',
    \ ]
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
autocmd CursorHold * silent call CocActionAsync('highlight')
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)
command! -nargs=0 Format :call CocActionAsync('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)
nnoremap <silent><nowait> <space>a :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <space>c :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <space>o :<C-u>CocList outline<cr>
nnoremap <silent><nowait> <space>s :<C-u>CocList -I symbols<cr>
function! s:enable_coc_for_filetype()
    let l:blacklist = ['js', 'jsx', 'ts', 'tsx', 'json', 'xml', 'html', 'htm', 'css', 'py']
    if index(l:blacklist, expand('%:e')) != -1
        let b:coc_enabled = 1
    else
        let b:coc_enabled = 0
    endif
endfunction
autocmd BufNew,BufEnter,BufAdd,BufCreate * call s:enable_coc_for_filetype()

let NERDTreeShowBookmarks = 1
let NERDTreeShowLineNumbers = 1

let g:NERDTreeChDirMode = 2


" ============== 快捷鍵綁定 ===============

map <C-0> :NERDTreeToggle<CR>

function! DongLinWenKuScrap()
    g!/<a.*href=".*"/d
    :%s/^.\{-}<a.\{-}href="\(.\{-}\)".*$/\1/g 
    g!/.*\(pdf\|zip\|epub\|doc\|docx\|rar\)/d 
    :%s/.*\//
    :%sort u
endfunction
command DongLinWenKuScrap call DongLinWenKuScrap()

